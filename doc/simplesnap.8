.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "SIMPLESNAP" "8" "12 February 2014" "" ""

.SH NAME
simplesnap \- Simple and powerful way to send ZFS snapshots across a    network
.SH SYNOPSIS

\fBsimplesnap\fR [ \fB--sshcmd
\fICOMMAND\fB\fR ] [ \fB--local\fR ] \fB--store \fISTORE\fB\fR \fB--setname
\fINAME\fB\fR \fB--host
\fIHOST\fB\fR


\fBsimplesnap\fR \fB--check \fITIMEFRAME\fB\fR \fB--store \fISTORE\fB\fR \fB--setname
\fINAME\fB\fR [ \fB--host
\fIHOST\fB\fR ]

.SH "DESCRIPTION"
.PP
\fBsimplesnap\fR is a simple way to send ZFS snapshots across a
network.  Although it can serve many purposes, its primary goal
is to manage backups from one ZFS filesystem to a backup
filesystem also running ZFS, using incremental backups to
minimize network traffic and disk usage.
.PP
\fBsimplesnap\fR is \fBFLEXIBLE\fR; it is designed to
perfectly compliment snapshotting tools, permitting rotating
backups with arbitrary retention periods.  It lets multiple
machines back up a single target, lets one machine back up
multiple targets, and keeps it all straight.
.PP
\fBsimplesnap\fR is \fBEASY\fR; there is no
configuration file needed.  One ZFS property is available to
exclude datasets/filesystems.  ZFS datasets are automatically
discovered on machines being backed up.
.PP
\fBsimplesnap\fR is \fBSAFE\fR; it is robust in the
face of interrupted transfers, and needs little help to keep
running.
.PP
\fBsimplesnap\fR is \fBSECURE\fR; unlike many similar
tools, it does not require full root access to the machines
being backed up.  It runs only a small wrapper as root, and the
wrapper has only three commands it implements.
.SS "FEATURE LIST"
.PP
Besides the above, \fBsimplesnap\fR:
.TP 0.2i
\(bu
Does one thing and does it well.  It is designed to be used with
a snapshot auto-rotator on both ends (such as zfSnap).  simplesnap
will transfer snapshots made by other tools, but will not destroy
them on either end.
.TP 0.2i
\(bu
Requires ssh public key authorization to the host being backed up,
but does not require permission to run arbitrary commands.  It has
a wrapper to run on the backup host, written in bash, which accepts
only three operations and performs them simply.  It is suitable for
a locked-down authorized_keys file.
.TP 0.2i
\(bu
Creates minimal snapshots for its own internal purposes, generally
leaving no more than 1 or 2 per dataset, and reaps them
automatically without touching others.
.TP 0.2i
\(bu
Is a small program, easily audited.  In fact, most of the code is devoted to sanity-checking, security, and error
checking.
.TP 0.2i
\(bu
Automatically discovers what datasets to back up from the remote.
Uses a user-defined zfs property to exclude filesystems that should
not be backed up.
.TP 0.2i
\(bu
Logs copiously to syslog on all hosts involved in backups.
.TP 0.2i
\(bu
Intelligently supports a single machine being backed up by multiple
backup hosts, or onto multiple sets of backup media (when, for
instance, backup media is cycled into offsite storage)
.SS "METHOD OF OPERATION"
.PP
\fBsimplesnap\fR\&'s operation is very simple.
.PP
The \fBsimplesnap\fR program runs on the machine
that stores the backups -- we'll call it the backuphost.
There is a restricted remote command wrapper called
\fBsimplesnapwrap\fR that runs on the machine
being backed up -- we'll call it the activehost.
\fBsimplesnapwrap\fR is never invoked directly by
the end-user; it is always called remotely by
\fBsimplesnap\fR\&.
.PP
With \fBsimplesnap\fR, the backuphost always connects to the
activehost -- never the other way round.
.PP
\fBsimplesnap\fR runs in the backuphost, and
first connects to the \fBsimplesnapwrap\fR on the
activehost and asks it for a
list of the ZFS datasets ("listfs" operation).  \fBsimplesnapwrap\fR
responds with a list of all ZFS datasets that were not flagged for
exclusion.
.PP
Next, \fBsimplesnap\fR connects back to \fBsimplesnapwrap\fR once for each dataset
to be backed up -- the "sendback" operation.  \fBsimplesnap\fR passes along
to it only two things: the setname and the dataset
(filesystem) name.
.PP
\fBsimplesnapwrap\fR looks to see if there is an existing simplesnap
snapshot corresponding to that \fISETNAME\fR\&.  If not, it creates one and
sends it as a full, non-incremental backup.  That completes the job
for that dataset.
.PP
If there is an existing snapshot for that \fISETNAME\fR, simplesnapwrap
creates a new one, constructing the snapshot name containing a
timestamp and the \fISETNAME\fR, then sends an incremental, using the oldest
snapshot from that setname as the basis for zfs send -I.
.PP
After the backuphost has observed \fBzfs receive\fR exiting without error,
it contacts \fBsimplesnapwrap\fR once more and requests the "reap"
operation.  This cleans up the old snapshots for the given \fISETNAME\fR,
leaving only the most recent.  This is a separate operation in
\fBsimplesnapwrap\fR ensuring that even if the transmission is interrupted,
still it will be OK in the end because \fBzfs receive -F\fR is used, and the
data will come across next time.
.PP
The idea is that some system like \fBzfSnap\fR will be used on both ends to
make periodic snapshots and clean them up.  One can use careful prefix
names with zfSnap to use different prefixes on each serverhost, and
then implement custom cleanup rules with -F on the holderhost.
.SH "QUICK START"
.PP
This section will describe how a first-time \fBsimplesnap\fR user
can get up and running quickly.  It assumes you already have
\fBsimplesnap\fR installed and working on your system.  If not,
please follow the instructions in the
\fIINSTALL.txt\fR file in the source
distribution.
.PP
As above, I will refer to the machine storing the backups as the
"backuphost" and the machine being backed up as the
"activehost".
.PP
First, on the backuphost, as root, generate an ssh keypair that
will be used exclusively for \fBsimplesnap\fR\&.
.PP
\fBssh-keygen -t rsa -f ~/.ssh/id_rsa_simplesnap\fR
.PP
When prompted for a passphrase, leave it empty.
.PP
Now, on the activehost, edit or create a file called
\fI~/.ssh/authorized_keys\fR\&.  Initialize it with the content of
\fI~/.ssh/id_rsa_simplesnap.pub\fR from the backuphost.  (Or, add to the
end, if you already have lines in the file.)  Then, at the
beginning of that one very long line, add text like this:

.nf
command="/usr/sbin/simplesnapwrap",from="1.2.3.4",
no-port-forwarding,no-X11-forwarding,no-pty 
.fi
.PP
(I broke that line into two for readability, but this must all
be on a single line in your file.)
.PP
The \fI1.2.3.4\fR is the IP address that
connections from the backuphost
will appear to come from.  It may be omitted if the IP is not static,
but it affords a little extra security.  The line will wind up looking
like:

.nf
command="/usr/sbin/simplesnapwrap",from="1.2.3.4",
no-port-forwarding,no-X11-forwarding,no-pty ssh-rsa AAAA....
.fi
.PP
(Again, this should all be on one huge line.)
.PP
If there are any ZFS datasets you do not want to be backed up, set
\fIorg.complete.simplesnap:exclude\fR property
on the activehost
to \fIon\fR\&.  For instance:
.PP
\fBzfs set org.complete.simplesnap:exclude=on
tank/junkdata\fR
.PP
Now, back on the backuphost, you should be able to run:
.PP
\fBssh -i ~/.ssh/id_rsa_simplesnap serverhost\fR
.PP
say yes when asked if you want to add the key to the known_hosts
file.  At this point, you should see output containing:
.PP
"simplesnapwrap: This program is to be run from ssh."
.PP
If you see that, then simplesnapwrap was properly invoked
remotely.
.PP
Now, create a ZFS filesystem to hold your backups.  For
instance:
.PP
\fBzfs create tank/simplesnap\fR
.PP
Now, you can run the backup:
.PP
\fBsimplesnap --host serverhost --setname mainset
--store tank/simplesnap
--sshcmd "ssh -i /root/.ssh/id_rsa_simplesnap"
\fR
.PP
You can monitor progress in \fI/var/log/syslog\fR\&.  If all goes well, you
will see filesystems start to be populated under
\fItank/simplesnap/host\fR\&.
.PP
Simple!
.SH "ADVANCED: SETNAME USAGE"
.PP
Most people will always use the same \fISETNAME\fR\&.  The \fISETNAME\fR is used to
track and name the snapshots on the remote end.  simplesnap tries to always
leave one snapshot on the remote, to serve as the base for a future
incremental.
.PP
In some situations, you may have multiple bases for incrementals.  The
two primary examples are two different backup servers backing up the
same machine, or having two sets of backup media and rotating them to
offsite storage.  In these situations, you will have to keep different
snapshots on the activehost for the different backups, since they will
be current to different points in time.
.SH "OPTIONS"
.PP
All \fBsimplesnap\fR options begin with two dashes (`--').  Most take
a parameter, which is to be separated from the option by a
space.  The equals sign is not a valid separator for
\fBsimplesnap\fR\&.
.PP
The normal \fBsimplesnap\fR mode is backing up.  An alternative
check mode is available, which requires fewer parameters.  This
mode is described below.
.TP
\fB--check \fITIMEFRAME\fB \fR
Do not back up, but check existing backups.  If any
datasets' newest backup is older than
\fITIMEFRAME\fR, print an error and
exit with a nonzero code.  Scans all hosts unless a
specific host is given with \fB--host\fR\&.  The
parameter is in the format given to GNU \fBdate\fR(1); for
instance,
--check "30 days ago".  Remember to enclose it in quotes
if it contains spaces.
.TP
\fB--host \fIHOST\fB\fR
Gives the name of the host to back up.  This is both
passed to ssh and used to name the backup sets.

In a few situations, one may not wish to use the same name
for both.  It is recommend to use the Host and HostName
options in \fI~/.ssh/config\fR to configure aliases in this
situation.
.TP
\fB--local \fR
Specifies that the host being backed up is local to the
machine.  Do not use ssh to contact it, and invoke the
wrapper directly.
.TP
\fB--sshcmd \fICOMMAND\fB \fR
Gives the command to use to connect to the remote host.
Defaults to "ssh".  It may be used to select an
alternative configuration file or keypair.  Remember to
quote it per your shell if it contains spaces.  For example: 
--sshcmd "ssh -i /root/.id_rsa_simplesnap".  This command
is ignored when \fB--local\fR or
\fB--check\fR is given.
.TP
\fB--setname \fISETNAME\fB\fR
Gives the backup set name.  Can just be a made-up word if
multiple sets are not needed; for instance, the hostname of
the backup server.  This is used as part of the snapshot
name.
.TP
\fB--store \fISTORE\fB \fR
Gives the ZFS dataset name where the data
will be stored.  Should not begin with a slash.  The
mountpoint will be obtained from the ZFS subsystem.
Always required.
.TP
\fB--wrapcmd \fICOMMAND\fB \fR
Gives the path to simplesnapwrap (which must be on the
remote machine unless \fB--local\fR is given).
Not usually relevant, since the
\fIcommand\fR parameter in
\fI~root/.ssh/authorized_keys\fR gives the
path.  Default: "simplesnapwrap"
.SH "SEE ALSO"
.PP
zfSnap (1), zfs (8).
.PP
The \fBsimplesnap\fR homepage:  <URL:https://github.com/jgoerzen/simplesnap>
.PP
The examples included with the \fBsimplesnap\fR distribution, or on
its homepage.
.PP
The zfSnap package compliments \fBsimplesnap\fR perfectly.  Find it
at
 <URL:https://github.com/graudeejs/zfSnap>\&.
.SH "AUTHOR"
.PP
This software and manual page was written by John Goerzen <jgoerzen@complete.org>\&.
Permission is
granted to copy, distribute and/or modify this document under
the terms of the GNU General Public License, Version 3 any
later version published by the Free Software Foundation.  The
complete text of the GNU General Public License is included in
the file COPYING in the source distribution.
